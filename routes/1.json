Cursor {
  pool: null,
  server: null,
  disconnectHandler: Store {
    s: { storedOps: [], storeOptions: [Object], topology: [ReplSet] },
    length: [Getter]
  },
  bson: BSON {},
  ns: 'newsletter.v2',
  cmd: {
    find: 'newsletter.v2',
    limit: 0,
    skip: 0,
    query: { 'auth.token': '123' },
    raw: undefined,
    hint: null,
    timeout: undefined,
    slaveOk: false,
    readPreference: null
  },
  options: {
    skip: 0,
    limit: 0,
    raw: undefined,
    hint: null,
    timeout: undefined,
    slaveOk: false,
    readPreference: null,
    db: Db {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      s: [Object],
      serverConfig: [Getter],
      bufferMaxEntries: [Getter],
      databaseName: [Getter]
    },
    promiseLibrary: [Function: Promise],
    disconnectHandler: Store { s: [Object], length: [Getter] },
    topology: ReplSet {
      _events: [Object],
      _eventsCount: 23,
      _maxListeners: Infinity,
      clientInfo: [Object],
      s: [Object]
    }
  },
  topology: ReplSet {
    _events: [Object: null prototype] {
      authenticated: [Function],
      error: [Array],
      timeout: [Array],
      close: [Array],
      parseError: [Array],
      reconnect: [Array],
      serverOpening: [Function],
      serverDescriptionChanged: [Function],
      serverHeartbeatStarted: [Function],
      serverHeartbeatSucceeded: [Function],
      serverHeartbeatFailed: [Function],
      serverClosed: [Function],
      topologyOpening: [Function],
      topologyClosed: [Function],
      topologyDescriptionChanged: [Function],
      commandStarted: [Function],
      commandSucceeded: [Function],
      commandFailed: [Function],
      joined: [Function],
      left: [Function],
      ping: [Function],
      ha: [Function],
      open: [Function]
    },
    _eventsCount: 23,
    _maxListeners: Infinity,
    clientInfo: { driver: [Object], os: [Object], platform: 'Node.js v12.0.0, LE' },
    s: {
      coreTopology: [ReplSet],
      sCapabilities: [ServerCapabilities],
      tag: undefined,
      storeOptions: [Object],
      clonedOptions: [Object],
      store: [Store],
      options: [Object],
      sessionPool: [ServerSessionPool],
      sessions: [],
      promiseLibrary: [Function: Promise]
    }
  },
  cursorState: {
    cursorId: null,
    cmd: {
      find: 'newsletter.v2',
      limit: 0,
      skip: 0,
      query: [Object],
      raw: undefined,
      hint: null,
      timeout: undefined,
      slaveOk: false,
      readPreference: null
    },
    documents: [],
    cursorIndex: 0,
    dead: false,
    killed: false,
    init: false,
    notified: false,
    limit: 0,
    skip: 0,
    batchSize: 1000,
    currentLimit: 0,
    transforms: undefined,
    raw: undefined
  },
  logger: Logger { className: 'Cursor' },
  _readableState: ReadableState {
    objectMode: true,
    highWaterMark: 16,
    buffer: BufferList { head: null, tail: null, length: 0 },
    length: 0,
    pipes: null,
    pipesCount: 0,
    flowing: null,
    ended: false,
    endEmitted: false,
    reading: false,
    sync: true,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    paused: true,
    emitClose: true,
    autoDestroy: false,
    destroyed: false,
    defaultEncoding: 'utf8',
    awaitDrain: 0,
    readingMore: false,
    decoder: null,
    encoding: null
  },
  readable: true,
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s: {
    numberOfRetries: 5,
    tailableRetryInterval: 500,
    currentNumberOfRetries: 5,
    state: 0,
    streamOptions: {},
    bson: BSON {},
    ns: 'newsletter.v2',
    cmd: {
      find: 'newsletter.v2',
      limit: 0,
      skip: 0,
      query: [Object],
      raw: undefined,
      hint: null,
      timeout: undefined,
      slaveOk: false,
      readPreference: null
    },
    options: {
      skip: 0,
      limit: 0,
      raw: undefined,
      hint: null,
      timeout: undefined,
      slaveOk: false,
      readPreference: null,
      db: [Db],
      promiseLibrary: [Function: Promise],
      disconnectHandler: [Store],
      topology: [ReplSet]
    },
    topology: ReplSet {
      _events: [Object],
      _eventsCount: 23,
      _maxListeners: Infinity,
      clientInfo: [Object],
      s: [Object]
    },
    topologyOptions: {
      disconnectHandler: [Store],
      cursorFactory: [Function],
      reconnect: false,
      emitError: true,
      size: 5,
      monitorCommands: false,
      ssl: true,
      setName: 'Cluster0-shard-0',
      socketTimeout: 360000,
      connectionTimeout: 30000,
      promiseLibrary: [Function: Promise],
      clientInfo: [Object]
    },
    promiseLibrary: [Function: Promise],
    currentDoc: null,
    explicitlyIgnoreSession: undefined
  },
  sortValue: undefined
}